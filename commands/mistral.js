const axios = require('axios');

module.exports = {
  name: 'mistral',
  description: 'Sends a prompt to the Mistral API with the user\'s Facebook UID.',
  usage: '[ üí¨ ùó®ùòÄùóÆùó¥ùó≤ üí¨ ]\n\nüîπ Example: [ üí¨ ${prefix}mistral What is the weather like today? üí¨ ]',
  nashPrefix: false,
  execute(api, event, args, prefix) {
    try {
      if (!args.length) {
        const usageMessage = `
üîÆ ùó†ùó∂ùòÄùòÅùóøùóÆùóπ ùóñùóºùó∫ùó∫ùóÆùóªùó± üîÆ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí¨ ùó®ùòÄùóÆùó¥ùó≤ üí¨

üîπ ${prefix}mistral [prompt]

üîπ Example:
üîπ ${prefix}mistral who killed my heart?
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        `;
        api.sendMessage(usageMessage, event.threadID);
        return;
      }

      const prompt = encodeURIComponent(args.join(' '));
      const senderID = event.senderID;
      const apiUrl = `https://nash-rest-api.vercel.app/mistral`;

      api.sendMessage('üîç Processing your request...', event.threadID);

      axios.get(apiUrl, { params: { prompt, senderID } })
        .then(response => {
          const data = response.data;
          
          if (data && data.response) {
            const formattedResponse = `
üîÆ ùó†ùó∂ùòÄùòÅùóøùóÆùóπ'ùòÄ ùó•ùó≤ùòÄùóΩùóºùóªùòÄùó≤ üîÆ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${data.response}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            `;

            api.sendMessage(formattedResponse, event.threadID);
          } else {
            throw new Error('Invalid response format from API');
          }
        })
        .catch(error => {
          console.error('Error fetching Mistral data:', error.message || error);
          api.sendMessage('‚ö†Ô∏è An error occurred while fetching the Mistral data.', event.threadID);
        });
    } catch (error) {
      console.error('Error executing command:', error.message || error);
      api.sendMessage('‚ö†Ô∏è An error occurred while executing the command.', event.threadID);
    }
  },
};